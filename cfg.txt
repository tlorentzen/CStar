<Prog>           →   <Prog> < $
<Stuff>          →   <Stuff>, <Dcls>
                 |   <Stuff>, <Funcs>

<StmtList>       →   <Stmtlist> <Stmt>
                 |   /* empty decllist */    

<FuncList>       →   <FuncList> <Func>
                 |   /* empty funclist */    

<Stmt>           →   <Dcls> ; 
                 |   <Expr> ; 
                 |   <Func call> ; 
                 |   if (<CondExpr>) <Blk>
                 |   if (<CondExpr>) <Blk> else <Blk>
                 |   while ( <CondExpr> ) repeat <Blk>


<Blk>            →   { ( <Dcls> | <Stmt> )* }


<Dcls>           →   <Dcls>, <Dcl>
<Dcl>            →   <Type> <Id> ; 
                 |   <Type> <Id> = <Expr> ; 


<Funcs>          →   <Funcs>, <Func>
<Func>           →   <ReturnType> <Id> ‘(‘ <Params>* ’)’ <Blk>

<Param>          →   <Type> <id> (, <Param>)*
<Func call>      →   <id> ‘(‘ <id> (, <id>)* ‘)’


<Expr>           →   <CondExpr>
<ArithmExpr>     →   <Term> ( ( + | - ) <Term> )*
<Term>           →   <Factor> ( ( * | / ) <Factor> )* 

<Factor>         →   <Id> 
                 |   <Val> 
                 |   ( <Expr> ) 

<CondExpr>       →   <ArithmExpr> (<CompOp> <ArithmExpr>)? (( OR | AND ) <CondExpr>)*

<ReturnType>     →   <Type>
                 |   "void"

<Type>           →   "integer" 
                 |   "decimal"
                 |   "character"
                 |   "big integer" 
                 |   "pin"
                 |   "long"
                 |   "array"
 


 
<CompOp>         →   "<" 
                 |   ">" 
                 |   "IS" 
                 |   "ISNOT"






TOKEN SPECIFICATION

<assign op>      →   =
<plus>           →   + 
<minus>          →   - 
<multiply>       →   *
<division>       →   /

<Id>             →   ( [a-z] | [A-Z] | [0-9] | _ | - )+
<Val>            →   <int literal> | <float literal> | <char literal> | <pin literal> | <long literal>
<int literal>    →   ( - )? [0-9]+
<long literal>   →   ( - )? [0-9]+
<float literal>  →   ( - )? [0-9]+ (.[0-9]+)?
<char literal>   →   ‘ ( \ )? (.) ‘
<pin literal>    →   ( a | A )? [0-9]+
<array literal>  →   [ <Val> [, <Val>]* ]


<Struct??>       →   pin | array