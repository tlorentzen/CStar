// DO NOT EDIT
// Generated by JFlex 1.8.1 http://jflex.de/
// source: C:/Users/Niels/Desktop/cstarScanner.flex

import java_cup.runtime.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Scanner implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\3\u1f00"+
    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\3\u1f00\1\u3f00\1\u4000"+
    "\4\u1f00\1\u4100\11\u1f00\3\u0100\1\u4200\1\u4300\13\u1f00\4\u0100"+
    "\1\u4400\63\u1f00\2\u0100\1\u4500\4\u1f00\1\u4600\100\u1f00\1\u4700"+
    "\40\u1f00\1\u4800\1\u4900\1\u1f00\1\u4a00\1\u4b00\1\u4c00\1\u4d00"+
    "\26\u1f00\1\u4e00\21\u1f00\246\u0100\1\u4f00\20\u0100\1\u5000\1\u5100"+
    "\77\u1f00\2\u0100\1\u5100\u0b05\u1f00\1\u5200\1\u5300\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\16\0\4\6"+
    "\1\1\1\6\1\7\1\10\1\11\2\6\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\30\1\6\1\34\1\35\1\36\1\37\2\6\1\40"+
    "\2\41\1\42\1\41\1\43\2\11\1\44\2\11\1\45"+
    "\1\11\1\46\1\47\2\11\1\50\1\51\1\52\6\11"+
    "\1\53\1\54\1\55\1\6\1\11\1\6\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\2\11"+
    "\1\67\1\70\1\71\1\72\1\73\1\11\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\11\1\102\1\11\1\103"+
    "\1\6\1\104\1\6\6\0\1\105\32\0\2\6\4\11"+
    "\4\6\1\11\2\6\1\0\7\6\1\11\4\6\1\11"+
    "\5\6\27\11\1\6\37\11\1\6\u01ca\11\4\6\14\11"+
    "\16\6\5\11\7\6\1\11\1\6\1\11\21\6\160\0"+
    "\5\11\1\6\2\11\2\6\4\11\10\6\1\11\1\6"+
    "\3\11\1\6\1\11\1\6\24\11\1\6\123\11\1\6"+
    "\213\11\1\6\5\0\2\6\236\11\11\6\46\11\2\6"+
    "\1\11\7\6\47\11\7\6\1\11\1\6\55\0\1\6"+
    "\1\0\1\6\2\0\1\6\2\0\1\6\1\0\10\6"+
    "\33\11\5\6\3\11\15\6\5\0\6\6\1\11\4\6"+
    "\13\0\5\6\53\11\37\0\4\6\2\11\1\0\143\11"+
    "\1\6\1\11\10\0\1\6\6\0\2\11\2\0\1\6"+
    "\4\0\2\11\12\0\3\11\2\6\1\11\17\6\1\0"+
    "\1\11\1\0\36\11\33\0\2\6\131\11\13\0\1\11"+
    "\16\6\12\0\41\11\11\0\2\11\4\6\1\11\5\6"+
    "\26\11\4\0\1\11\11\0\1\11\3\0\1\11\5\0"+
    "\22\6\31\11\3\0\104\6\1\11\1\6\13\11\67\6"+
    "\33\0\1\6\4\0\66\11\3\0\1\11\22\0\1\11"+
    "\7\0\12\11\2\0\2\6\12\0\1\6\7\11\1\6"+
    "\7\11\1\6\3\0\1\6\10\11\2\6\2\11\2\6"+
    "\26\11\1\6\7\11\1\6\1\11\3\6\4\11\2\6"+
    "\1\0\1\11\7\0\2\6\2\0\2\6\3\0\1\11"+
    "\10\6\1\0\4\6\2\11\1\6\3\11\2\0\2\6"+
    "\12\0\4\11\7\6\1\11\5\6\3\0\1\6\6\11"+
    "\4\6\2\11\2\6\26\11\1\6\7\11\1\6\2\11"+
    "\1\6\2\11\1\6\2\11\2\6\1\0\1\6\5\0"+
    "\4\6\2\0\2\6\3\0\3\6\1\0\7\6\4\11"+
    "\1\6\1\11\7\6\14\0\3\11\1\0\13\6\3\0"+
    "\1\6\11\11\1\6\3\11\1\6\26\11\1\6\7\11"+
    "\1\6\2\11\1\6\5\11\2\6\1\0\1\11\10\0"+
    "\1\6\3\0\1\6\3\0\2\6\1\11\17\6\2\11"+
    "\2\0\2\6\12\0\1\6\1\11\17\6\3\0\1\6"+
    "\10\11\2\6\2\11\2\6\26\11\1\6\7\11\1\6"+
    "\2\11\1\6\5\11\2\6\1\0\1\11\7\0\2\6"+
    "\2\0\2\6\3\0\10\6\2\0\4\6\2\11\1\6"+
    "\3\11\2\0\2\6\12\0\1\6\1\11\20\6\1\0"+
    "\1\11\1\6\6\11\3\6\3\11\1\6\4\11\3\6"+
    "\2\11\1\6\1\11\1\6\2\11\3\6\2\11\3\6"+
    "\3\11\3\6\14\11\4\6\5\0\3\6\3\0\1\6"+
    "\4\0\2\6\1\11\6\6\1\0\16\6\12\0\11\6"+
    "\1\11\7\6\3\0\1\6\10\11\1\6\3\11\1\6"+
    "\27\11\1\6\12\11\1\6\5\11\3\6\1\11\7\0"+
    "\1\6\3\0\1\6\4\0\7\6\2\0\1\6\2\11"+
    "\6\6\2\11\2\0\2\6\12\0\22\6\2\0\1\6"+
    "\10\11\1\6\3\11\1\6\27\11\1\6\12\11\1\6"+
    "\5\11\2\6\1\0\1\11\7\0\1\6\3\0\1\6"+
    "\4\0\7\6\2\0\7\6\1\11\1\6\2\11\2\0"+
    "\2\6\12\0\1\6\2\11\17\6\2\0\1\6\10\11"+
    "\1\6\3\11\1\6\51\11\2\6\1\11\7\0\1\6"+
    "\3\0\1\6\4\0\1\11\10\6\1\0\10\6\2\11"+
    "\2\0\2\6\12\0\12\6\6\11\2\6\2\0\1\6"+
    "\22\11\3\6\30\11\1\6\11\11\1\6\1\11\2\6"+
    "\7\11\3\6\1\0\4\6\6\0\1\6\1\0\1\6"+
    "\10\0\22\6\2\0\15\6\60\11\1\0\2\11\7\0"+
    "\4\6\10\11\10\0\1\6\12\0\47\6\2\11\1\6"+
    "\1\11\2\6\2\11\1\6\1\11\2\6\1\11\6\6"+
    "\4\11\1\6\7\11\1\6\3\11\1\6\1\11\1\6"+
    "\1\11\2\6\2\11\1\6\4\11\1\0\2\11\6\0"+
    "\1\6\2\0\1\11\2\6\5\11\1\6\1\11\1\6"+
    "\6\0\2\6\12\0\2\6\4\11\40\6\1\11\27\6"+
    "\2\0\6\6\12\0\13\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\2\0\10\11\1\6\44\11\4\6\24\0"+
    "\1\6\2\0\5\11\13\0\1\6\44\0\11\6\1\0"+
    "\71\6\53\11\24\0\1\11\12\0\6\6\6\11\4\0"+
    "\4\11\3\0\1\11\3\0\2\11\7\0\3\11\4\0"+
    "\15\11\14\0\1\11\17\0\2\6\46\11\1\6\1\11"+
    "\5\6\1\11\2\6\53\11\1\6\115\11\1\6\4\11"+
    "\2\6\7\11\1\6\1\11\1\6\4\11\2\6\51\11"+
    "\1\6\4\11\2\6\41\11\1\6\4\11\2\6\7\11"+
    "\1\6\1\11\1\6\4\11\2\6\17\11\1\6\71\11"+
    "\1\6\4\11\2\6\103\11\2\6\3\0\40\6\20\11"+
    "\20\6\125\11\14\6\u016c\11\2\6\21\11\1\6\32\11"+
    "\5\6\113\11\3\6\3\11\17\6\15\11\1\6\4\11"+
    "\3\0\13\6\22\11\3\0\13\6\22\11\2\0\14\6"+
    "\15\11\1\6\3\11\1\6\2\0\14\6\64\11\40\0"+
    "\3\6\1\11\3\6\2\11\1\0\2\6\12\0\41\6"+
    "\3\0\2\6\12\0\6\6\130\11\10\6\51\11\1\0"+
    "\1\11\5\6\106\11\12\6\35\11\3\6\14\0\4\6"+
    "\14\0\12\6\12\0\36\11\2\6\5\11\13\6\54\11"+
    "\4\6\21\0\7\11\2\0\6\6\12\0\46\6\27\11"+
    "\5\0\4\6\65\11\12\0\1\6\35\0\2\6\13\0"+
    "\6\6\12\0\15\6\1\11\130\6\5\0\57\11\21\0"+
    "\7\11\4\6\12\0\21\6\11\0\14\6\3\0\36\11"+
    "\15\0\2\11\12\0\54\11\16\0\14\6\44\11\24\0"+
    "\10\6\12\0\3\6\3\11\12\0\44\11\122\6\3\0"+
    "\1\6\25\0\4\11\1\0\4\11\3\0\2\11\11\6"+
    "\300\11\47\0\25\6\4\0\26\11\2\6\6\11\2\6"+
    "\46\11\2\6\6\11\2\6\10\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\37\11\2\6\65\11\1\6"+
    "\7\11\1\6\1\11\3\6\3\11\1\6\7\11\3\6"+
    "\4\11\2\6\6\11\4\6\15\11\5\6\3\11\1\6"+
    "\7\11\16\6\5\0\30\6\2\3\5\0\20\6\2\11"+
    "\23\6\1\11\13\6\5\0\5\6\6\0\1\6\1\11"+
    "\15\6\1\11\20\6\15\11\3\6\33\11\25\6\15\0"+
    "\4\6\1\0\3\6\14\0\21\6\1\11\4\6\1\11"+
    "\2\6\12\11\1\6\1\11\3\6\5\11\6\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\4\11\1\6\13\11"+
    "\2\6\4\11\5\6\5\11\4\6\1\11\21\6\51\11"+
    "\u0177\6\57\11\1\6\57\11\1\6\205\11\6\6\4\11"+
    "\3\0\2\11\14\6\46\11\1\6\1\11\5\6\1\11"+
    "\2\6\70\11\7\6\1\11\17\6\1\0\27\11\11\6"+
    "\7\11\1\6\7\11\1\6\7\11\1\6\7\11\1\6"+
    "\7\11\1\6\7\11\1\6\7\11\1\6\7\11\1\6"+
    "\40\0\57\6\1\11\325\6\3\11\31\6\11\11\6\0"+
    "\1\6\5\11\2\6\5\11\4\6\126\11\2\6\2\0"+
    "\2\6\3\11\1\6\132\11\1\6\4\11\5\6\51\11"+
    "\3\6\136\11\21\6\33\11\65\6\306\11\112\6\315\11"+
    "\63\6\215\11\103\6\56\11\2\6\15\11\3\6\20\11"+
    "\12\0\2\11\24\6\57\11\1\0\4\6\12\0\1\6"+
    "\31\11\7\6\1\0\120\11\2\0\45\6\11\11\2\6"+
    "\147\11\2\6\4\11\1\6\4\11\14\6\13\11\115\6"+
    "\12\11\1\0\3\11\1\0\4\11\1\0\27\11\5\0"+
    "\20\6\1\11\7\6\64\11\14\6\2\0\62\11\21\0"+
    "\13\6\12\0\6\6\22\0\6\11\3\6\1\11\4\6"+
    "\12\0\34\11\10\0\2\6\27\11\15\0\14\6\35\11"+
    "\3\6\4\0\57\11\16\0\16\6\1\11\12\0\46\6"+
    "\51\11\16\0\11\6\3\11\1\0\10\11\2\0\2\6"+
    "\12\0\6\6\27\11\3\6\1\11\1\0\4\6\60\11"+
    "\1\0\1\11\3\0\2\11\2\0\5\11\2\0\1\11"+
    "\1\0\1\11\30\6\3\11\2\6\13\11\5\0\2\6"+
    "\3\11\2\0\12\6\6\11\2\6\6\11\2\6\6\11"+
    "\11\6\7\11\1\6\7\11\221\6\43\11\10\0\1\6"+
    "\2\0\2\6\12\0\6\6\244\11\14\6\27\11\4\6"+
    "\61\11\4\6\u0100\3\156\11\2\6\152\11\46\6\7\11"+
    "\14\6\5\11\5\6\1\11\1\0\12\11\1\6\15\11"+
    "\1\6\5\11\1\6\1\11\1\6\2\11\1\6\2\11"+
    "\1\6\154\11\41\6\153\11\22\6\100\11\2\6\66\11"+
    "\50\6\15\11\3\6\20\0\20\6\7\0\14\6\2\11"+
    "\30\6\3\11\31\6\1\11\6\6\5\11\1\6\207\11"+
    "\2\6\1\0\4\6\1\11\13\6\12\0\7\6\32\11"+
    "\4\6\1\11\1\6\32\11\13\6\131\11\3\6\6\11"+
    "\2\6\6\11\2\6\6\11\2\6\3\11\3\6\2\11"+
    "\3\6\2\11\22\6\3\0\4\6\14\11\1\6\32\11"+
    "\1\6\23\11\1\6\2\11\1\6\17\11\2\6\16\11"+
    "\42\6\173\11\105\6\65\11\210\6\1\0\202\6\35\11"+
    "\3\6\61\11\57\6\37\11\21\6\33\11\65\6\36\11"+
    "\2\6\44\11\4\6\10\11\1\6\5\11\52\6\236\11"+
    "\2\6\12\0\126\6\6\11\2\6\1\11\1\6\54\11"+
    "\1\6\2\11\3\6\1\11\2\6\27\11\252\6\26\11"+
    "\12\6\32\11\106\6\70\11\6\6\2\11\100\6\1\11"+
    "\3\0\1\6\2\0\5\6\4\0\4\11\1\6\3\11"+
    "\1\6\33\11\4\6\3\0\4\6\1\0\40\6\35\11"+
    "\203\6\66\11\12\6\26\11\12\6\23\11\215\6\111\11"+
    "\267\6\3\0\65\11\17\0\37\6\12\0\20\6\3\0"+
    "\55\11\13\0\2\6\1\0\22\6\31\11\7\6\12\0"+
    "\6\6\3\0\44\11\16\0\1\6\12\0\100\6\3\0"+
    "\60\11\16\0\4\11\13\6\12\0\246\6\53\11\15\0"+
    "\10\6\12\0\66\6\157\11\221\6\143\11\235\6\57\11"+
    "\321\6\71\11\307\6\105\11\13\6\1\11\56\0\20\6"+
    "\4\0\15\11\140\6\2\11\u0163\6\5\0\3\6\26\0"+
    "\2\6\7\0\36\6\4\0\224\6\3\0\273\6\125\11"+
    "\1\6\107\11\1\6\2\11\2\6\1\11\2\6\2\11"+
    "\2\6\4\11\1\6\14\11\1\6\1\11\1\6\7\11"+
    "\1\6\101\11\1\6\4\11\2\6\10\11\1\6\7\11"+
    "\1\6\34\11\1\6\4\11\1\6\5\11\1\6\1\11"+
    "\3\6\7\11\1\6\u0154\11\2\6\31\11\1\6\31\11"+
    "\1\6\37\11\1\6\31\11\1\6\37\11\1\6\31\11"+
    "\1\6\37\11\1\6\31\11\1\6\37\11\1\6\31\11"+
    "\1\6\10\11\2\6\62\0\4\11\1\6\33\11\1\6"+
    "\2\11\1\6\1\11\2\6\1\11\1\6\12\11\1\6"+
    "\4\11\1\6\1\11\1\6\1\11\6\6\1\11\4\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\3\11\1\6"+
    "\2\11\1\6\1\11\2\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\2\11\1\6"+
    "\1\11\2\6\4\11\1\6\7\11\1\6\4\11\1\6"+
    "\4\11\1\6\1\11\1\6\12\11\1\6\21\11\5\6"+
    "\3\11\1\6\5\11\1\6\21\11\104\6\327\11\51\6"+
    "\65\11\13\6\336\11\343\6\1\0\36\6\140\0\200\6"+
    "\360\0\20\6";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[21504];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\2\15\1\16"+
    "\1\17\1\20\1\21\3\3\1\22\1\23\14\3\1\24"+
    "\1\25\1\1\2\26\1\1\4\0\1\27\1\30\1\31"+
    "\1\27\1\3\1\32\1\33\7\3\1\34\6\3\1\35"+
    "\11\36\1\37\2\0\1\40\2\3\1\41\10\3\1\42"+
    "\4\3\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\2\0\5\3\1\53\1\54\2\3\1\55\2\3"+
    "\1\56\1\3\2\0\1\57\1\60\7\3\1\61\2\0"+
    "\5\3\1\62\1\63\2\0\2\3\1\64\1\65\1\66"+
    "\2\0\1\3\1\67\2\0\1\70\3\0\1\71\6\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\322\0\u0118\0\u015e\0\u01a4"+
    "\0\322\0\322\0\322\0\322\0\322\0\322\0\u01ea\0\322"+
    "\0\322\0\u0230\0\u0276\0\322\0\322\0\322\0\322\0\u02bc"+
    "\0\u0302\0\u0348\0\322\0\322\0\u038e\0\u03d4\0\u041a\0\u0460"+
    "\0\u04a6\0\u04ec\0\u0532\0\u0578\0\u05be\0\u0604\0\u064a\0\u0690"+
    "\0\322\0\322\0\u06d6\0\322\0\u071c\0\u0762\0\u07a8\0\u07ee"+
    "\0\u0834\0\u087a\0\u08c0\0\322\0\322\0\u0906\0\u094c\0\u0992"+
    "\0\u01a4\0\u09d8\0\u0a1e\0\u0a64\0\u0aaa\0\u0af0\0\u0b36\0\u0b7c"+
    "\0\u01a4\0\u0bc2\0\u0c08\0\u0c4e\0\u0c94\0\u0cda\0\u0d20\0\322"+
    "\0\322\0\u0d66\0\u0dac\0\u0df2\0\u0e38\0\u0e7e\0\u0ec4\0\u0f0a"+
    "\0\u0f50\0\322\0\u0f96\0\u0fdc\0\u01a4\0\u1022\0\u1068\0\u01a4"+
    "\0\u10ae\0\u10f4\0\u113a\0\u1180\0\u11c6\0\u120c\0\u1252\0\u1298"+
    "\0\u01a4\0\u12de\0\u1324\0\u136a\0\u13b0\0\322\0\322\0\322"+
    "\0\322\0\322\0\322\0\322\0\322\0\u13f6\0\u143c\0\u1482"+
    "\0\u14c8\0\u150e\0\u1554\0\u159a\0\u01a4\0\u01a4\0\u15e0\0\u1626"+
    "\0\u01a4\0\u166c\0\u16b2\0\u01a4\0\u16f8\0\u173e\0\u1784\0\u01a4"+
    "\0\u01a4\0\u17ca\0\u1810\0\u1856\0\u189c\0\u18e2\0\u1928\0\u196e"+
    "\0\u01a4\0\u19b4\0\u19fa\0\u1a40\0\u1a86\0\u1acc\0\u1b12\0\u1b58"+
    "\0\u01a4\0\u01a4\0\u1b9e\0\u1be4\0\u1c2a\0\u1c70\0\u01a4\0\u01a4"+
    "\0\u01a4\0\u1cb6\0\u1cfc\0\u1d42\0\u01a4\0\u1d88\0\u1dce\0\u01a4"+
    "\0\u1e14\0\u1e5a\0\u1ea0\0\322\0\u1ee6\0\u1f2c\0\u1f72\0\u1fb8"+
    "\0\u1ffe\0\u2044";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\4\1\5\1\6\2\4\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\10\23\1\24\1\25\1\26\1\27\1\30"+
    "\3\10\1\31\2\10\1\32\3\10\1\33\1\4\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\10\1\42\1\10"+
    "\1\43\2\10\1\44\1\10\1\45\1\46\3\10\1\47"+
    "\1\50\1\10\1\51\1\52\107\4\2\53\1\54\2\53"+
    "\1\55\4\53\1\4\41\53\1\56\31\53\110\0\1\5"+
    "\126\0\1\57\10\60\4\0\4\60\12\0\6\60\22\0"+
    "\1\10\10\0\1\10\11\0\11\10\4\0\13\10\3\0"+
    "\25\10\2\0\1\10\25\0\1\61\101\0\1\62\1\0"+
    "\11\63\7\0\1\64\1\0\1\65\15\0\1\64\3\0"+
    "\1\65\37\0\1\62\1\0\11\23\7\0\1\64\1\0"+
    "\1\65\15\0\1\64\3\0\1\65\16\0\1\10\10\0"+
    "\1\10\11\0\11\66\4\0\6\10\1\67\4\10\3\0"+
    "\25\10\2\0\2\10\10\0\1\10\11\0\11\10\4\0"+
    "\11\10\1\70\1\10\3\0\25\10\2\0\2\10\10\0"+
    "\1\10\11\0\11\10\4\0\10\10\1\71\2\10\3\0"+
    "\25\10\2\0\2\10\10\0\1\10\11\0\11\10\4\0"+
    "\13\10\3\0\16\10\1\72\6\10\2\0\2\10\10\0"+
    "\1\10\11\0\11\10\4\0\13\10\3\0\10\10\1\73"+
    "\14\10\2\0\2\10\10\0\1\10\11\0\11\10\4\0"+
    "\13\10\3\0\7\10\1\74\4\10\1\75\10\10\2\0"+
    "\2\10\10\0\1\10\11\0\11\10\4\0\13\10\3\0"+
    "\4\10\1\76\20\10\2\0\2\10\10\0\1\10\11\0"+
    "\11\10\4\0\13\10\3\0\11\10\1\77\13\10\2\0"+
    "\2\10\10\0\1\10\11\0\11\10\4\0\13\10\3\0"+
    "\14\10\1\100\10\10\2\0\2\10\10\0\1\10\11\0"+
    "\11\10\4\0\13\10\3\0\5\10\1\101\5\10\1\102"+
    "\11\10\2\0\2\10\10\0\1\10\11\0\11\10\4\0"+
    "\13\10\3\0\21\10\1\103\3\10\2\0\2\10\10\0"+
    "\1\10\11\0\11\10\4\0\13\10\3\0\10\10\1\104"+
    "\14\10\2\0\2\10\10\0\1\10\11\0\11\10\4\0"+
    "\13\10\3\0\4\10\1\105\20\10\2\0\2\10\10\0"+
    "\1\10\11\0\11\10\4\0\13\10\3\0\14\10\1\106"+
    "\10\10\2\0\2\10\10\0\1\10\11\0\11\10\4\0"+
    "\13\10\3\0\7\10\1\107\15\10\2\0\1\10\12\0"+
    "\1\110\75\0\1\54\103\0\2\111\4\0\1\111\1\112"+
    "\2\111\1\113\41\111\1\114\2\111\1\115\3\111\1\116"+
    "\5\111\1\117\2\111\1\120\1\111\1\121\6\111\24\0"+
    "\1\57\10\60\4\0\4\60\1\0\1\122\10\0\6\60"+
    "\3\0\1\122\41\0\11\123\4\0\4\123\1\0\1\122"+
    "\10\0\6\123\3\0\1\122\42\0\1\124\104\0\11\62"+
    "\7\0\1\64\17\0\1\64\43\0\1\62\1\0\11\63"+
    "\7\0\1\64\17\0\1\64\22\0\1\10\10\0\1\10"+
    "\11\0\11\66\4\0\13\10\3\0\25\10\2\0\2\10"+
    "\10\0\1\10\11\0\11\10\4\0\2\10\1\125\10\10"+
    "\3\0\25\10\2\0\2\10\10\0\1\10\11\0\11\10"+
    "\4\0\6\10\1\126\4\10\3\0\25\10\2\0\2\10"+
    "\10\0\1\10\11\0\11\10\4\0\13\10\3\0\16\10"+
    "\1\127\6\10\2\0\2\10\10\0\1\10\11\0\11\10"+
    "\4\0\13\10\3\0\6\10\1\130\16\10\2\0\2\10"+
    "\10\0\1\10\11\0\11\10\4\0\13\10\3\0\1\131"+
    "\24\10\2\0\2\10\10\0\1\10\11\0\11\10\4\0"+
    "\13\10\3\0\13\10\1\132\11\10\2\0\2\10\10\0"+
    "\1\10\11\0\11\10\4\0\13\10\3\0\2\10\1\133"+
    "\22\10\2\0\2\10\10\0\1\10\11\0\11\10\4\0"+
    "\13\10\3\0\17\10\1\134\5\10\2\0\2\10\10\0"+
    "\1\10\11\0\11\10\4\0\13\10\3\0\20\10\1\135"+
    "\4\10\2\0\2\10\10\0\1\10\11\0\11\10\4\0"+
    "\13\10\3\0\2\10\1\136\15\10\1\137\4\10\2\0"+
    "\2\10\10\0\1\10\11\0\11\10\4\0\13\10\3\0"+
    "\11\10\1\140\13\10\2\0\2\10\10\0\1\10\11\0"+
    "\11\10\4\0\13\10\3\0\13\10\1\141\11\10\2\0"+
    "\2\10\10\0\1\10\11\0\11\10\4\0\13\10\3\0"+
    "\15\10\1\142\2\10\1\143\4\10\2\0\2\10\10\0"+
    "\1\10\11\0\11\10\4\0\13\10\3\0\10\10\1\144"+
    "\14\10\2\0\2\10\10\0\1\10\11\0\11\10\4\0"+
    "\13\10\3\0\10\10\1\145\14\10\2\0\1\10\12\0"+
    "\1\146\105\0\1\147\105\0\1\150\105\0\1\151\105\0"+
    "\1\152\105\0\1\153\105\0\1\154\105\0\1\155\116\0"+
    "\11\156\4\0\4\156\1\0\1\122\10\0\6\156\3\0"+
    "\1\122\45\0\1\157\56\0\1\10\10\0\1\10\11\0"+
    "\11\10\4\0\7\10\1\160\3\10\3\0\25\10\2\0"+
    "\2\10\10\0\1\10\11\0\11\10\4\0\13\10\3\0"+
    "\1\161\24\10\2\0\2\10\10\0\1\10\11\0\11\10"+
    "\4\0\13\10\3\0\16\10\1\162\6\10\2\0\2\10"+
    "\10\0\1\10\11\0\11\10\4\0\13\10\3\0\17\10"+
    "\1\163\5\10\2\0\2\10\10\0\1\10\11\0\11\10"+
    "\4\0\13\10\3\0\10\10\1\164\14\10\2\0\2\10"+
    "\10\0\1\10\11\0\11\10\4\0\13\10\3\0\4\10"+
    "\1\165\20\10\2\0\2\10\10\0\1\10\11\0\11\10"+
    "\4\0\13\10\3\0\14\10\1\166\10\10\2\0\2\10"+
    "\10\0\1\10\11\0\11\10\4\0\13\10\3\0\11\10"+
    "\1\167\13\10\2\0\2\10\10\0\1\10\11\0\11\10"+
    "\4\0\13\10\3\0\4\10\1\170\20\10\2\0\2\10"+
    "\10\0\1\10\11\0\11\10\4\0\13\10\3\0\11\10"+
    "\1\171\13\10\2\0\2\10\10\0\1\10\11\0\11\10"+
    "\4\0\13\10\3\0\4\10\1\172\20\10\2\0\2\10"+
    "\10\0\1\10\11\0\11\10\4\0\13\10\3\0\21\10"+
    "\1\173\3\10\2\0\2\10\10\0\1\10\11\0\11\10"+
    "\4\0\13\10\3\0\3\10\1\174\21\10\2\0\2\10"+
    "\10\0\1\10\11\0\11\10\4\0\13\10\3\0\11\10"+
    "\1\175\13\10\2\0\1\10\23\0\11\176\4\0\4\176"+
    "\1\0\1\122\10\0\6\176\3\0\1\122\50\0\1\177"+
    "\53\0\1\10\10\0\1\10\11\0\11\10\4\0\12\10"+
    "\1\200\3\0\25\10\2\0\2\10\10\0\1\10\11\0"+
    "\11\10\4\0\13\10\3\0\24\10\1\201\2\0\2\10"+
    "\10\0\1\10\11\0\11\10\4\0\13\10\3\0\1\202"+
    "\24\10\2\0\2\10\10\0\1\10\11\0\11\10\4\0"+
    "\13\10\3\0\20\10\1\203\4\10\2\0\2\10\10\0"+
    "\1\10\11\0\11\10\4\0\13\10\3\0\12\10\1\204"+
    "\12\10\2\0\2\10\10\0\1\10\11\0\11\10\4\0"+
    "\13\10\3\0\21\10\1\205\3\10\2\0\2\10\10\0"+
    "\1\10\11\0\11\10\4\0\13\10\3\0\6\10\1\206"+
    "\16\10\2\0\2\10\10\0\1\10\11\0\11\10\4\0"+
    "\13\10\3\0\1\207\24\10\2\0\2\10\10\0\1\10"+
    "\11\0\11\10\4\0\13\10\3\0\16\10\1\210\6\10"+
    "\2\0\2\10\10\0\1\10\11\0\11\10\4\0\13\10"+
    "\3\0\4\10\1\211\20\10\2\0\1\10\23\0\11\212"+
    "\4\0\4\212\1\0\1\122\10\0\6\212\3\0\1\122"+
    "\45\0\1\213\56\0\1\10\10\0\1\10\11\0\11\10"+
    "\4\0\13\10\3\0\2\10\1\214\22\10\2\0\2\10"+
    "\10\0\1\10\11\0\11\10\4\0\13\10\3\0\1\215"+
    "\24\10\2\0\2\10\10\0\1\10\11\0\11\10\4\0"+
    "\13\10\3\0\1\216\24\10\2\0\2\10\10\0\1\10"+
    "\11\0\11\10\4\0\13\10\3\0\3\10\1\217\21\10"+
    "\2\0\2\10\10\0\1\10\11\0\11\10\4\0\13\10"+
    "\3\0\4\10\1\220\20\10\2\0\2\10\10\0\1\10"+
    "\11\0\11\10\4\0\13\10\3\0\20\10\1\221\4\10"+
    "\2\0\2\10\10\0\1\10\11\0\11\10\4\0\13\10"+
    "\3\0\13\10\1\222\11\10\2\0\1\10\23\0\11\223"+
    "\4\0\4\223\1\0\1\122\10\0\6\223\3\0\1\122"+
    "\51\0\1\224\52\0\1\10\10\0\1\10\11\0\11\10"+
    "\4\0\13\10\3\0\20\10\1\225\4\10\2\0\2\10"+
    "\10\0\1\10\11\0\11\10\4\0\13\10\3\0\13\10"+
    "\1\226\11\10\2\0\2\10\10\0\1\10\11\0\11\10"+
    "\4\0\13\10\3\0\11\10\1\227\13\10\2\0\2\10"+
    "\10\0\1\10\11\0\11\10\4\0\13\10\3\0\4\10"+
    "\1\230\20\10\2\0\2\10\10\0\1\10\11\0\11\10"+
    "\4\0\13\10\3\0\16\10\1\231\6\10\2\0\1\10"+
    "\23\0\11\232\4\0\4\232\1\0\1\122\10\0\6\232"+
    "\3\0\1\122\44\0\1\233\57\0\1\10\10\0\1\10"+
    "\11\0\11\10\4\0\13\10\3\0\4\10\1\234\20\10"+
    "\2\0\2\10\10\0\1\10\11\0\11\10\4\0\13\10"+
    "\3\0\20\10\1\235\4\10\2\0\1\10\23\0\11\236"+
    "\4\0\4\236\1\0\1\122\10\0\6\236\3\0\1\122"+
    "\47\0\1\237\54\0\1\10\10\0\1\10\11\0\11\10"+
    "\4\0\13\10\3\0\16\10\1\240\6\10\2\0\1\10"+
    "\23\0\11\241\4\0\4\241\1\0\1\122\10\0\6\241"+
    "\3\0\1\122\45\0\1\242\101\0\11\243\4\0\4\243"+
    "\1\0\1\122\10\0\6\243\3\0\1\122\51\0\1\244"+
    "\75\0\11\245\4\0\4\245\1\0\1\122\10\0\6\245"+
    "\3\0\1\122\41\0\11\246\4\0\4\246\1\0\1\122"+
    "\10\0\6\246\3\0\1\122\41\0\11\247\4\0\4\247"+
    "\1\0\1\122\10\0\6\247\3\0\1\122\41\0\11\250"+
    "\4\0\4\250\1\0\1\122\10\0\6\250\3\0\1\122"+
    "\41\0\11\251\4\0\4\251\1\0\1\122\10\0\6\251"+
    "\3\0\1\122\41\0\11\252\4\0\4\252\1\0\1\122"+
    "\10\0\6\252\3\0\1\122\63\0\1\122\21\0\1\122"+
    "\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8330];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\3\1\6\11\1\1\2\11\2\1\4\11"+
    "\3\1\2\11\14\1\2\11\1\1\1\11\2\1\4\0"+
    "\1\1\2\11\22\1\2\11\10\1\1\11\2\0\21\1"+
    "\10\11\2\0\16\1\2\0\12\1\2\0\7\1\2\0"+
    "\5\1\2\0\2\1\2\0\1\1\3\0\1\11\6\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  StringBuilder string = new StringBuilder();

  private Symbol symbol(int type) {
    return new JavaSymbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
    return new JavaSymbol(type, yyline+1, yycolumn+1, value);
  }

  /**
   * assumes correct representation of a long value for
   * specified radix in scanner buffer from <code>start</code>
   * to <code>end</code>
   */
  private long parseLong(int start, int end, int radix) {
    long result = 0;
    long digit;

    for (int i = start; i < end; i++) {
      digit  = Character.digit(yycharat(i),radix);
      result*= radix;
      result+= digit;
    }

    return result;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new RuntimeException("Illegal character \""+yytext()+
                                                              "\" at line "+yyline+", column "+yycolumn);
            }
            // fall through
          case 58: break;
          case 2:
            { /* ignore */
            }
            // fall through
          case 59: break;
          case 3:
            { return symbol(IDENTIFIER, yytext());
            }
            // fall through
          case 60: break;
          case 4:
            { yybegin(CHARLITERAL);
            }
            // fall through
          case 61: break;
          case 5:
            { return symbol(LPAREN);
            }
            // fall through
          case 62: break;
          case 6:
            { return symbol(RPAREN);
            }
            // fall through
          case 63: break;
          case 7:
            { return symbol(MULT);
            }
            // fall through
          case 64: break;
          case 8:
            { return symbol(PLUS);
            }
            // fall through
          case 65: break;
          case 9:
            { return symbol(COMMA);
            }
            // fall through
          case 66: break;
          case 10:
            { return symbol(MINUS);
            }
            // fall through
          case 67: break;
          case 11:
            { return symbol(DOT);
            }
            // fall through
          case 68: break;
          case 12:
            { return symbol(DIV);
            }
            // fall through
          case 69: break;
          case 13:
            { return symbol(INTEGER_LITERAL, Integer.valueOf(yytext()));
            }
            // fall through
          case 70: break;
          case 14:
            { return symbol(SEMICOLON);
            }
            // fall through
          case 71: break;
          case 15:
            { return symbol(LT);
            }
            // fall through
          case 72: break;
          case 16:
            { return symbol(EQ);
            }
            // fall through
          case 73: break;
          case 17:
            { return symbol(GT);
            }
            // fall through
          case 74: break;
          case 18:
            { return symbol(LBRACK);
            }
            // fall through
          case 75: break;
          case 19:
            { return symbol(RBRACK);
            }
            // fall through
          case 76: break;
          case 20:
            { return symbol(LBRACE);
            }
            // fall through
          case 77: break;
          case 21:
            { return symbol(RBRACE);
            }
            // fall through
          case 78: break;
          case 22:
            { throw new RuntimeException("Unterminated character literal at end of line");
            }
            // fall through
          case 79: break;
          case 23:
            { yybegin(PIN); string.setLength(0);
            }
            // fall through
          case 80: break;
          case 24:
            { return symbol(FLOATING_POINT_LITERAL, new Float(yytext().substring(0,yylength()-1)));
            }
            // fall through
          case 81: break;
          case 25:
            { return symbol(INTEGER_LITERAL, new Long(yytext().substring(0,yylength()-1)));
            }
            // fall through
          case 82: break;
          case 26:
            { return symbol(EQEQ);
            }
            // fall through
          case 83: break;
          case 27:
            { return symbol(OROR);
            }
            // fall through
          case 84: break;
          case 28:
            { return symbol(IF);
            }
            // fall through
          case 85: break;
          case 29:
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, yytext().charAt(0));
            }
            // fall through
          case 86: break;
          case 30:
            { throw new RuntimeException("Illegal escape sequence \""+yytext()+"\"");
            }
            // fall through
          case 87: break;
          case 31:
            { return symbol(INTEGER_LITERAL, new Long(parseLong(2, yylength()-1, 16)));
            }
            // fall through
          case 88: break;
          case 32:
            { return symbol(ANDAND);
            }
            // fall through
          case 89: break;
          case 33:
            { return symbol(LONG);
            }
            // fall through
          case 90: break;
          case 34:
            { return symbol(PIN);
            }
            // fall through
          case 91: break;
          case 35:
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\"');
            }
            // fall through
          case 92: break;
          case 36:
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\'');
            }
            // fall through
          case 93: break;
          case 37:
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\\');
            }
            // fall through
          case 94: break;
          case 38:
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\b');
            }
            // fall through
          case 95: break;
          case 39:
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\f');
            }
            // fall through
          case 96: break;
          case 40:
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\n');
            }
            // fall through
          case 97: break;
          case 41:
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\r');
            }
            // fall through
          case 98: break;
          case 42:
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\t');
            }
            // fall through
          case 99: break;
          case 43:
            { return symbol(ELSE);
            }
            // fall through
          case 100: break;
          case 44:
            { return symbol(GOTO);
            }
            // fall through
          case 101: break;
          case 45:
            { return symbol(NULL_LITERAL);
            }
            // fall through
          case 102: break;
          case 46:
            { return symbol(VOID);
            }
            // fall through
          case 103: break;
          case 47:
            { return symbol(NOTEQ);
            }
            // fall through
          case 104: break;
          case 48:
            { return symbol(ARRAY);
            }
            // fall through
          case 105: break;
          case 49:
            { return symbol(WHILE);
            }
            // fall through
          case 106: break;
          case 50:
            { return symbol(REPEAT);
            }
            // fall through
          case 107: break;
          case 51:
            { return symbol(RETURN);
            }
            // fall through
          case 108: break;
          case 52:
            { return symbol(FLOAT);
            }
            // fall through
          case 109: break;
          case 53:
            { return symbol(IMPORT);
            }
            // fall through
          case 110: break;
          case 54:
            { return symbol(INT);
            }
            // fall through
          case 111: break;
          case 55:
            { return symbol(CONST);
            }
            // fall through
          case 112: break;
          case 56:
            { return symbol(CHAR);
            }
            // fall through
          case 113: break;
          case 57:
            { return symbol(INTEGER_LITERAL, Integer.valueOf(Integer.MIN_VALUE));
            }
            // fall through
          case 114: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   */
  private static String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Scanner [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Scanner scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Scanner(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
